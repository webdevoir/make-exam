<div id='remote_container'></div>

<%= link_to "Back to exam",examination_path(@exam) %><br/>

<div class="row">
  <div class="col-md-8 col-sm-12">

      <h2>Write a question for <em><%= @exam.name %></em>.</h2>
      <div class="question-header">
      <% if @question.position %>
        <span class="question-number">Question <%= @question.position %> out of <%= @exam.questions.count %></span>
      <% else %>
        <span class="question-number">Question <%= @exam.questions.count + 1%> out of <%= @exam.questions.count + 1 %></span>
      <% end %>
        <span class="question-prev-next">
          <% prev = Question.find_by(examination_id: @exam.id, position: @exam.questions.count) if !@question.position %>
          <% prev = Question.find_by(examination_id: @exam.id, position: @question.position - 1) if @question.position%>
          <% if prev %>
            <%= link_to "Prev", edit_examination_question_path(@exam, prev), id: "prevlink" %>
          <% else %>
            Prev
          <% end %>
           /
          <% next_ques = Question.find_by(examination_id: @exam.id, position: @question.position + 1) if @question.position%>
          <% if next_ques %>
            <%= link_to "Next", edit_examination_question_path(@exam, next_ques), id: "nextlink" %>
          <% else %>
            Next
          <% end %>
        </span>
      </div>
      <%= form_for([@exam, @question]) do |f| %>
        <% if @question.errors.any? %>
          <div>
           <!--  <%= pluralize(@question.errors.count, "error") %> prevented the question from being saved: -->
            <ul>
              <% @question.errors.messages.each do |attr, msg| %>
                <% msg.each do |val| %>
              <li><%= val %></li>
              <% end %>
              <% end %>
            </ul>
          </div>
        <% end %>

        <div style="clear: both;">
          <%= f.text_area :body, class: "question_new_body tinymce"%>
        </div>
        <div style="clear: both; width:100%">
          <% unless @question.id == nil %>
          <%= link_to "Preview Question", examination_question_path(@exam, @question), data:  {:remote => true, 'data-toggle' =>  "modal", 'data-target' => '#remote_container'}, class: " form-control  exam_button", style: "width:auto;float: left", id: "question-preview-button"  %>
          <% else %>
            <%= link_to "Preview Question", "#", data: {confirm: "This only works on existing questions, under construction..."}, class: " form-control  exam_button", style: "width:auto;float: left", id: "question-preview-button"  %>
          <% end %>
          <%= link_to "Math Equations", "/pages/math", data:  {:remote => true, 'data-toggle' =>  "modal", 'data-target' => '#remote_container'}, class: " form-control  exam_button", style: "width:auto;float: left", id: "question-preview-button"  %>

        </div>

      <div style="clear: both;"></div>

        <div class="question_type_points" >
          <div style="float: left;">
            <%= f.label :question_type %><br>
            <%= f.select :question_type, ["Multiple Choice", "True/False", "Multiple Response", "Fill in the blank"], {}, { class: "form-control" } %>
          </div>
          <div style="float: right;">
            <%= f.label :points %><br>
            <%= f.select :points, [1 ,2, 3, 4, 5, 6, 7, 8, 9 , 10], {},{ class: "form-control" }%>
          </div>
        </div>
        <p>Enter the answer choices, and mark which answer is correct</p>
        <div style="clear: both;">
          
          <%= f.fields_for :answers do |ans_f| %>
            <%= render 'answer_fields', f: ans_f %>
        <% end %>
        <%= link_to_add_association 'add answer', f, :answers %>
      </div>
          <div><%= f.submit "Save", class: 'form-control question_buttons exam_button', id: "main_sumbit", data: { disable_with: false } %></div>
          <div><%= f.submit "Save and Add Question", name: "add", class: 'form-control question_buttons exam_button', data: { disable_with: false } %></div>
          <%= button_tag t('buttons.cancel'), type: "submit", name: "cancel", value: true, class: 'form-control question_buttons exam_button' %>
        <% end %>
  </div>

  <div class="col-md-4 col-sm-12 question_sidebar">
        <% if @question.position && @question.position > 10
              @start = @question.position.to_i - 5
              @fin = @question.position.to_i + 5
              sorted_ques = @exam.questions.sort_by { |a| a.position }
            elsif @question.position
              @start = 0
              @fin = 9
              sorted_ques = @exam.questions.sort_by { |a| a.position }
            else
              @start = 0
              @fin = 9
              sorted_ques = @exam.questions
          end %>
        <% sorted_ques[@start..@fin].each do |ques| %>
          <% if ques.id %>
            <%= link_to edit_examination_question_path(@exam, ques) do %>
              <div class="question_sidebar_list">
                  <h4>Question <%= ques.position %></h4>
                  <%= strip_tags(ques.body) %>
              </div>
          <% end %>
        <% end %>

        <% end %>

  </div>
</div>
<%= tinymce_assets %>
<%= tinymce %>
<script>
  $( function() {

      var ques1
      var ques2
      var ques3
      var ques4
/////// Store initial answers //////////////
       $('.question_answer_body').each(function( index ) {
              var textBox = $(this).find('textarea')

              
              switch (index) { 
                case 0: 
                  ques1 = textBox.val()
                  break;
                case 1:
                  ques2 = textBox.val()
                  break;
                case 2:
                  ques3 = textBox.val()
                  break;
                case 3:
                  ques4 = textBox.val()
                  break;
                default:
                  
              }
            });
//////////////////////////////////////////////////
console.log("ques1 => " + ques1)

      var q_type = $('#question_question_type');
      q_type.click(questionType);

      var type = "<%= @question.question_type %>";
      questionType(type);
      function questionType(ent) {
        if (ent && ent.length > 1) {
          var val = ent;
          console.log("There is an ent");
        } else {
          var val = $(this).val();
          console.log("No ent");
        }
        console.log(val);
        if (val == "True/False") {
        //   $('.question_radio').find("[type='checkbox']").prop('type', "radio");
        //   $('#question_answers_attributes_0_body').val("True").parent().parent().show()
        //   $('#question_answers_attributes_1_body').val("False").parent().parent().show()
        //   $('#question_answers_attributes_2_body').parent().parent().hide()
        //   $('#question_answers_attributes_3_body').parent().parent().hide()
        // } else if(val == "Multiple Choice") {
        //   $('.question_radio').find("[type='checkbox']").prop('type', "radio");
        //   $('#question_answers_attributes_0_body').parent().parent().show().val(ques1)
        //   $('#question_answers_attributes_1_body').parent().parent().show().val(ques2)
        //   $('#question_answers_attributes_2_body').parent().parent().show().val(ques3)
        //   $('#question_answers_attributes_3_body').parent().parent().show().val(ques4)
        // } else if(val == "Multiple Response") {
        //   $('.question_radio').find("[type='radio']").prop('type', "checkbox");
        //   $('#question_answers_attributes_0_body').parent().parent().show().val(ques1)
        //   $('#question_answers_attributes_1_body').parent().parent().show().val(ques2)
        //   $('#question_answers_attributes_2_body').parent().parent().show().val(ques3)
        //   $('#question_answers_attributes_3_body').parent().parent().show().val(ques4)
        // } else if(val == "Fill in the blank") {
        //   $('.question_radio').find("[type='radio']").prop('type', "radio");
        //   $('#question_answers_attributes_0_body').parent().parent().show().val(ques1)
        //   $('#question_answers_attributes_1_body').parent().parent().hide()
        //   $('#question_answers_attributes_2_body').parent().parent().hide()
        //   $('#question_answers_attributes_3_body').parent().parent().hide()

          $('.question_radio').find("[type='checkbox']").prop('type', "radio");
          $('.question_answer_body').each(function( index ) {
            // console.log( index + ": " + $( this ).text() );
            var textBox = $(this).find('textarea')
            // console.log(textBox.attr('id'));
              ////////////////
              switch (index) { 
                case 0: 
                  textBox.val("True").parent().parent().show()
                  break;
                case 1:
                  textBox.val("False").parent().parent().show()
                  break;
                default:
                  textBox.parent().parent().hide()
              }
              ////////////////
          });
        } else if(val == "Multiple Choice") {
           $('.question_radio').find("[type='checkbox']").prop('type', "radio");
            $('.question_answer_body').each(function( index ) {
              // console.log( index + ": " + $( this ).text() );
              var textBox = $(this).find('textarea')
              // console.log(textBox.attr('id'));
              
              switch (index) { 
                case 0: 
                  textBox.val(ques1).parent().parent().show()
                  break;
                case 1:
                  textBox.val(ques2).parent().parent().show()
                  break;
                case 2:
                  textBox.val(ques3).parent().parent().show()
                  break;
                case 3:
                  textBox.val(ques4).parent().parent().show()
                  break;
                default:
                  textBox.val("").parent().parent().show()
              }
            });
        } else if(val == "Multiple Response") {
          $('.question_radio').find("[type='radio']").prop('type', "checkbox");
          $('.question_answer_body').each(function( index ) {
              // console.log( index + ": " + $( this ).text() );
              var textBox = $(this).find('textarea')
              // console.log(textBox.attr('id'));
              
              switch (index) { 
                case 0: 
                  textBox.val(ques1).parent().parent().show()
                  break;
                case 1:
                  textBox.val(ques2).parent().parent().show()
                  break;
                case 2:
                  textBox.val(ques3).parent().parent().show()
                  break;
                case 3:
                  textBox.val(ques4).parent().parent().show()
                  break;
                default:
                  textBox.val("").parent().parent().show()
              }
            });
        } else if(val == "Fill in the blank") {
          $('.question_radio').find("[type='radio']").prop('type', "radio");
          $('.question_answer_body').each(function( index ) {
              // console.log( index + ": " + $( this ).text() );
              var textBox = $(this).find('textarea')
              // console.log(textBox.attr('id'));
               switch (index) { 
                    case 0: 
                      textBox.val(ques1).parent().parent().show()
                      break;
                    default:
                      textBox.parent().parent().hide()
                  }
            });
        }
      };
       $("input:radio").on('click', function() {
        $("input:radio").prop('checked', false);
        $(this).prop('checked', true);
     });
    var dirty = false;
    var originalFormData = $('form').serialize();

    function checkFormChanged() {
        if(originalFormData !== $('form').serialize()) {
          dirty = true;
      }
      console.log("Dirty => " + dirty);
    };
    $('#prevlink, #nextlink, .question_sidebar_list').click(function (e){
      if (dirty == true){
        var popup = window.confirm("Continue without saving changes?");
          if (popup) {
            console.log("confirmed");
          } else {
            e.preventDefault();
            console.log(" not confirmed");
          }
    
      }
    });
    $('input , textarea, select').on('keyup', function () {
      checkFormChanged()
    });


     // Popup if leaving page with chages
     // $(window).bind('beforeunload', function(e){
     //            if(dirty)
     //                return "You made some changes and it's not saved?";
     //            else 
     //                e=null; // i.e; if form state change show warning box, else don't show it.
     //        });


 </script>